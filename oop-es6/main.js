/*jshint esversion: 6*/
'use strict';

console.log('// ---------------------------------1--------------------------------------')

const sumFunc = (x, y) => x + y;

class StudentLog {
	constructor (name) {
		this._name = name;
		this._grades = {};
	}

	getName() {
		return this._name;
	}

	addGrade(grade, subject) {
		if (typeof(grade) !== 'number' || grade < 1 || grade > 5) {
			return `–í—ã –ø—ã—Ç–∞–ª–∏—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É "${grade}" –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "${subject}". –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1-5.`;
		}
		if (!this._grades[subject]) {
			this._grades[subject] = [];
		}
		this._grades[subject].push(grade);
		return this._grades[subject].length;
	}

	sumGrades(subject) {
		const grades = this._grades[subject];
		if (grades) {
			return grades.reduce(sumFunc, 0);
		}
		return 0;
	}

	getAverageBySubject(subject) {
		const grades = this._grades[subject];
		if (grades) {
			return this.sumGrades(subject) / grades.length;
		}
		return `–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É "${subject}" –æ—Ü–µ–Ω–æ–∫ –Ω–µ—Ç.`;
	}

	getTotalAverage() {
		const keys = Object.keys(this._grades);
		const self = this;
		return keys.reduce((sum, elem) => sumFunc(self.sumGrades(elem), sum), 0) / 
			keys.reduce((sum, elem) => sumFunc(self._grades[elem].length, sum), 0);
	}

	getGradesBySubject(subject) {
		const grades = this._grades[subject];
		if (grades) {
			return grades;
		}
		return [];
	}

	getGrades() {
		return this._grades;
	}

}


const log = new StudentLog('–û–ª–µ–≥ –ù–∏–∫–∏—Ñ–æ—Ä–æ–≤');
console.log(log.getName());
console.log(log.addGrade(3, 'algebra'));
console.log(log.addGrade('–æ—Ç–ª–∏—á–Ω–æ!', 'math'));

console.log(log.addGrade(4, 'algebra'));

console.log(log.addGrade(5, 'geometry'));
console.log(log.addGrade(25, 'chemistry'));

console.log(log.getAverageBySubject('geometry'));
console.log(log.getAverageBySubject('algebra'));
console.log(log.getAverageBySubject('math'));

console.log(log.getTotalAverage());

console.log(log.getGradesBySubject('geometry'));
console.log(log.getGradesBySubject('algebra'));
console.log(log.getGradesBySubject('math'));

console.log(log.getGrades());

console.log('// ---------------------------------2--------------------------------------')


let gameOver = false;

class Weapon {
	constructor(obj) {
		this.name = obj.name;
		this.attack = obj.attack;
		this.durability = obj.durability;
		this.range = obj.range;

		this.startDurability = obj.durability;
	}

	takeDamage(damage) {
		const lastDurability = this.durability;
		this.durability -= damage;
		if (this.durability < 0) {
			this.durability = 0;
		}
		console.log(`üó°Ô∏è ${this.name} –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–æ—á–Ω–æ—Å—Ç—å —Å ${lastDurability.toFixed(0)} –¥–æ ${this.durability.toFixed(0)}`);
	}

	getDamage() {
		if (this.durability >= 0.3 * this.startDurability) {
			return this.attack;
		}
		if (this.durability === 0) {
			return 0;
		}
		return this.attack / 2;
	}

	isBroken() {
		return this.durability === 0;
	}
}

class Arm extends Weapon {
	constructor(obj) {
		super(Object.assign({
			name: '–†—É–∫–∞',
			attack: 1,
			durability: Infinity,
			range: 1
		}, obj));
	}
}

class Bow extends Weapon {
	constructor(obj) {
		super(Object.assign({
			name: '–õ—É–∫',
			attack: 10,
			durability: 200,
			range: 3
		}, obj));
	}
}

class Sword extends Weapon {
	constructor(obj) {
		super(Object.assign({
			name: '–ú–µ—á',
			attack: 25,
			durability: 500,
			range: 1
		}, obj));
	}
}

class Knife extends Weapon {
	constructor(obj) {
		super(Object.assign({
			name: '–ù–æ–∂',
			attack: 5,
			durability: 300,
			range: 1
		}, obj));
	}
}

class Staff extends Weapon {
	constructor(obj) {
		super(Object.assign({
			name: '–ü–æ—Å–æ—Ö',
			attack: 8,
			durability: 300,
			range: 2
		}, obj));
	}
}

class LongBow extends Bow {
	constructor(object) {
		super(Object.assign({
			name: '–î–ª–∏–Ω–Ω—ã–π –ª—É–∫',
			attack: 15,
			range: 4
		}, obj));
	}
}

class Axe extends Sword {
	constructor(obj) {
		super(Object.assign({
			name: '–°–µ–∫–∏—Ä–∞',
			attack: 27,
			durability: 800
		}, obj));
	}
}

class StormStaff extends Staff {
	constructor(obj) {
		super(Object.assign({
			name: '–ü–æ—Å–æ—Ö –ë—É—Ä–∏',
			attack: 10,
			range: 3
		}, obj));
	}
}


class Player {
	constructor(obj) {
		this.life = typeof(obj.life) === 'number' && obj.life > 0 ? obj.life : 100;
		this.startLife = this.life;

		this.magic = typeof(obj.magic) === 'number' && obj.magic > 0 ? obj.magic : 20;
		this.startMagic = this.magic;

		this.speed = typeof(obj.speed) === 'number' && obj.speed > 0 ? obj.speed : 1;
		this.attack = typeof(obj.attack) === 'number' && obj.attack > 0 ? obj.attack : 10;
		this.agility = typeof(obj.agility) === 'number' && obj.agility > 0 ? obj.agility : 5;
		this.luck = typeof(obj.luck) === 'number' && obj.luck > 0 ? obj.luck : 10;
		
		this.description = typeof(obj.description) === 'string' && obj.description.length > 0 ? obj.description : '–ò–≥—Ä–æ–∫';
		this.name = typeof(obj.name) === 'string' && obj.name.length > 0 ? obj.name : '–ò–º—è';

		this.accusativeName = obj.accusativeName; // –ò–º—è –≤ –≤–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ –Ω—É–∂–Ω–æ –¥–ª—è –ª–æ–≥–æ–≤

		this.availWeapon = Array.isArray(obj.availWeapon) && obj.availWeapon.length > 0 ? obj.availWeapon : [Arm];
		this.currWeaponInd = 0;
		this.weapon = new this.availWeapon[this.currWeaponInd]();

		this.position = typeof(obj.position) === 'number' ? obj.position : 0;
	}

	getLuck() {
		return (100 * Math.random() + this.luck) / 100;
	}

	getDamage(distance) {
		if (distance > this.weapon.range) {
			return 0;
		}
		return (this.attack + this.weapon.getDamage()) * this.getLuck() / distance;
	}

	takeDamage(damage) {
		console.log(`üíî ${this.name} —Ç–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ:  ${this.life.toFixed(0)} –º–∏–Ω—É—Å ${damage.toFixed(0)}`);
		this.life -= damage;
		if (this.life < 0) {
			this.life = 0;
			console.log(`‚ò† ${this.name} –≤–Ω–µ –∏–≥—Ä—ã.`);
		}
	}

	isDead() {
		return this.life === 0;
	}

	moveLeft(distance) {
		this.position -= distance > this.speed ? this.speed : distance;
	}

	moveRight(distance) {
		this.position += distance > this.speed ? this.speed : distance;
	}

	move(distance) {
		const lastPosition = this.position;
		if (distance > 0) {
			this.moveRight(distance);
		} else {
			this.moveLeft(Math.abs(distance)); // –Ø —Ç–∞–∫ –ø–æ–Ω—è–ª, –≤ –∑–∞–¥–∞–Ω–∏–∏ –æ—à–∏–±–∫–∞, –Ω–∞–¥–æ —Å–º–µ—â–∞—Ç—å –Ω–∞ abs(distance), –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∏—Ç—Å—è –º–∏–Ω—É—Å –Ω–∞ –º–∏–Ω—É—Å. –Ø –±—ã –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏–∫—É moveLeft, moveRight —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –≤ move
		}
		console.log(`üèÉ‚Äç ${this.name} –∏–∑–º–µ–Ω–∏–ª –ø–æ–∑–∏—Ü–∏—é —Å ${lastPosition} –Ω–∞ ${this.position}`);
	}

	isAttackBlocked() {
		return this.getLuck() > (100 - this.luck) / 100;
	}

	dodged() {
		return this.getLuck() > (100 - this.agility - this.speed * 3) / 100;
	}

	takeAttack(damage) {
		if (this.isAttackBlocked()) {
			this.weapon.takeDamage(damage);
			console.log(`üõ° –£–¥–∞—á–ª–∏–≤—ã–π ${this.name}, –µ–≥–æ –æ—Ä—É–∂–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–æ —É–¥–∞—Ä`);
		} else if (this.dodged()) {
			// —É—Ä–æ–Ω –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
			console.log(`üê±‚Äçüë§ ${this.name} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç —É–¥–∞—Ä–∞`);
		} else {
			this.takeDamage(damage);
		}
	}

	checkWeapon() {
		if (this.weapon.isBroken()) {
			const brokenWeapon = this.weapon;

			if (this.currWeaponInd < this.availWeapon.length - 1) {
				this.currWeaponInd++;
				this.weapon = new this.availWeapon[this.currWeaponInd]();
				console.log(`üó° ${this.name} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ—Ä—É–∂–∏—è (—É –Ω–µ–≥–æ —Å–µ–π—á–∞—Å ${brokenWeapon.name}) –∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç, —á—Ç–æ –æ–Ω–æ —Å–ª–æ–º–∞–Ω–æ. –¢–µ–ø–µ—Ä—å –µ–≥–æ –æ—Ä—É–∂–∏–µ : ${this.weapon.name}`);
			}
		} else {
			console.log(`üó° ${this.name} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ—Ä—É–∂–∏—è (—É –Ω–µ–≥–æ —Å–µ–π—á–∞—Å ${this.weapon.name}), –æ—Ä—É–∂–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ`);
		}
	}

	tryAttack(enemy) {
		let coefPosition = 1;

		if (this.position == enemy.position) {
			// –ù–µ –ø–æ–Ω–∏–º–∞—é —Ñ—Ä–∞–∑—É –∏–∑ –∑–∞–¥–∞–Ω–∏—è "–ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∏ –∏–º–µ—é—Ç –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (position)", 
			// –ø—Ä–∏ —ç—Ç–æ–º –≤—ã—à–µ –Ω–∞–ø–∏—Å–∞–Ω–æ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ –≤—Ä–∞–≥–æ–º (distance). –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –≤—Å–µ–≥–¥–∞ –±–æ–ª—å—à–µ 0"
			// –ï—Å–ª–∏ –æ–¥–Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, —Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 0, –∏ —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
			console.log(`üèÉ‚Äç –ê—Ç–∞–∫—É–µ–º—ã–π ${enemy.name} –æ—Ç—Å–∫–∞–∫–∏–≤–∞–µ—Ç –≤–ø—Ä–∞–≤–æ, —Ç–∞–∫ –∫–∞–∫ –æ–∫–∞–∑–∞–ª—Å—è –Ω–∞ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º`);
			enemy.moveRight(1);
			coefPosition = 2;
		}

		const distance = Math.abs(enemy.position - this.position);
		if (this.weapon.range < distance) { // —è –¥—É–º–∞—é –≤ –∑–∞–¥–∞–Ω–∏–∏ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—Å–∞–Ω–æ "–±–æ–ª—å—à–µ distance"
			console.log(`‚ùå ${this.name} –ø—ã—Ç–∞–ª—Å—è –∞—Ç–∞–∫–æ–≤–∞—Ç—å ${enemy.accusativeName}, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ä—É–∂–∏—è`);
			return;
		}
		this.weapon.takeDamage(10 * this.getLuck());

		enemy.takeAttack(coefPosition * this.getDamage(distance));
	}

	chooseEnemy(players) {
		const alivePlayersWithoutMe = players.filter(p => p !== this && !p.isDead());
		const minLife = Math.min(...alivePlayersWithoutMe.map(p => p.life));
		return alivePlayersWithoutMe.find(p => p.life === minLife);
	}

	moveToEnemy(enemy) {
		// –∏–∑ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –∏–º–µ–µ—Ç—Å—è –≤ –≤–∏–¥—É "–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ"
		// –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –Ω–∞—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π
		this.move(enemy.position - this.position);
	}

	turn(players) {
		// "–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ turn( players ) –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞." ‚Äî –Ω–µ –ø–æ–Ω—è–ª, –æ –∫–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–¥—ë—Ç —Ä–µ—á—å
		const enemy = this.chooseEnemy(players);
		if (enemy === undefined) {
			// –Ø ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∂–∏–≤—à–∏–π
			console.log(`üôå ${this.name} –æ–±—ä—è–≤–∏–ª: "–Ø ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –∂–∏–≤—ã—Ö! –Ø –ø–æ–±–µ–¥–∏–ª!"`);
			console.log(players);
			gameOver = true;
			return;
		}
		this.checkWeapon();

		console.log(`‚öî ${this.name} —Ä–µ—à–∏–ª –∞—Ç–∞–∫–æ–≤–∞—Ç—å ${enemy.accusativeName}`);
		this.moveToEnemy(enemy);
		this.tryAttack(enemy);
	}
}



class Warrior extends Player {
	constructor(obj) {
		super(Object.assign({
			life: 120,
			speed: 2,
			attack: 10,
			description: '–í–æ–∏–Ω',
			availWeapon: [Sword, Knife, Arm]
		}, obj));
	}

	takeDamage(damage) {
		if (this.life < this.startLife * 0.5 && this.getLuck() > 0.8 && this.magic > 0) {
			this.magic -= damage;
			if (this.magic < 0) {
				this.magic = 0;
			}
		} else {
			// "–ü—Ä–∏ –Ω—É–ª–µ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –º–∞–Ω—ã —É—Ä–æ–Ω –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ –∑–¥–æ—Ä–æ–≤—å—è"
			// —è —ç—Ç–æ —Ç—Ä–∞–∫—Ç–æ–≤–∞–ª, –∫–∞–∫ "–ò–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è—Ç—å –ø–æ –Ω–∞—Å–ª–µ–¥—É–µ–º–æ–º—É –∫–ª–∞—Å—Å—É"
			super.takeDamage(damage);
		}
	}
}

class Archer extends Player {
	constructor(obj) {
		super(Object.assign({
			life: 80,
			magic: 35,
			attack: 5,
			agility: 10,
			description: '–õ—É—á–Ω–∏–∫',
			availWeapon: [Bow, Knife, Arm]
		}, obj));
	}

	getDamage(distance) {
		return (this.attack + this.weapon.getDamage()) * this.getLuck() * distance / this.weapon.range;
	}
}

class Mage extends Player {
	constructor(obj) {
		super(Object.assign({
			life: 70,
			magic: 100,
			attack: 5,
			agility: 8,
			description: '–ú–∞–≥',
			availWeapon: [Staff, Knife, Arm]
		}, obj));
	}

	takeDamage(damage) {
		if (this.magic > this.startMagic * 0.5) {
			damage /= 1.5; // —è –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç–∞–∫–æ–µ "–±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω" –∏ —É–º–µ–Ω—å—à–∏–ª —Ç–µ–∫—É—â–∏–π —É—Ä–æ–Ω –≤ 1.5, –Ω–æ —É –º–µ–Ω—è –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏–∑ –∑–∞–¥–∞—á–∏

			this.magic -= 12;
			if (this.magic < 0) {
				this.magic = 0;
			}
		}
		super.takeDamage(damage);
	}
}

class Dwarf extends Warrior {
	constructor(obj) {
		super(Object.assign({
			life: 130,
			attack: 15,
			luck: 20,
			description: '–ì–Ω–æ–º',
			availWeapon: [Axe, Knife, Arm]
		}, obj));
		this.numKick = 0; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞—Ä–æ–≤ –æ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
	}

	takeDamage(damage) {
		this.numKick++;
		if (this.numKick % 6 === 0 && this.getLuck() > 0.5) {
			damage /= 2;
		}
		super.takeDamage(damage);
	}
}

class Crossbowman extends Archer {
	constructor(obj) {
		super(Object.assign({
			life: 85,
			attack: 8,
			agility: 20,
			luck: 15,
			description: '–ê—Ä–±–∞–ª–µ—Ç—á–∏–∫',
			availWeapon: [LongBow, Knife, Arm]
		}, obj));
	}
}

class Demiurge extends Mage {
	constructor(obj) {
		super(Object.assign({
			life: 80,
			magic: 120,
			attack: 6,
			luck: 12,
			description: '–î–µ–º–∏—É—Ä–≥',
			availWeapon: [StormStaff, Knife, Arm]
		}, obj));
	}

	getDamage(distance) {
		const commonDamage = super.getDamage(distance);
		let coefDemiurge = 1;
		if (this.magic > 0 && this.getLuck() > 0.6) {
			coefDemiurge = 1.5;
		}
		return coefDemiurge * commonDamage;
	}
}


function play(players) {
	// –ö–∞–∫ —è –ø–æ–Ω—è–ª –∑–∞–¥–∞–Ω–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ö–æ–¥—ã –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∂–∏–≤—à–∏–π
	let num = 0;
	while (!gameOver) {
		num++;
		console.log(`‚åõ –•–æ–¥ ${num}`);
		players.forEach((p, i, arr) => {
			if (!p.isDead()) {
				p.turn(arr);
			}
		});
	}
}


play([
	new Mage({ life: 900, position: 10, name: 'üßô‚Äç –ò–≤–∞–Ω', accusativeName: 'üßô‚Äç –ò–≤–∞–Ω–∞'}),
	new Warrior({ life: 900, position: 0, name: 'üíÇ –î–∏–º–∞', accusativeName: 'üíÇ –î–∏–º—É'}),
]);

// play([
// 	new Warrior({ life: 1000, position: 10, name: 'üíÇ –ò–≤–∞–Ω', accusativeName: 'üíÇ –ò–≤–∞–Ω–∞'}),
// 	new Archer({ life: 1100, position: 25, name: 'üßù‚Äç –ò–ª—å–¥–∞—Ä', accusativeName: 'üßù‚Äç –ò–ª—å–¥–∞—Ä–∞'}),
// 	new Mage({ life: 1050, position: 15, name: 'üßô‚Äç‚ôÄÔ∏è –û–ª—å–≥–∞', accusativeName: 'üßô‚Äç‚ôÄÔ∏è –û–ª—å–≥—É'})
// ]);


// play([
// 	new Warrior({ position: 10, name: 'üíÇ –ò–≤–∞–Ω', accusativeName: 'üíÇ –ò–≤–∞–Ω–∞'}),
// 	new Warrior({ position: 12, name: 'üíÇ –û–ª–µ–≥', accusativeName: 'üíÇ –û–ª–µ–≥–∞'}),
// 	new Mage({ position: 0, name: 'üßô‚Äç –î–∏–º–∞', accusativeName: 'üßô‚Äç –î–∏–º—É'}),
// 	new Archer({ position: 20, name: 'üßù‚Äç –í–∞—Å—è', accusativeName: 'üßù‚Äç –í–∞—Å—é'}),
// 	new Archer({ position: 25, name: 'üßù‚Äç –ò–ª—å–¥–∞—Ä', accusativeName: 'üßù‚Äç –ò–ª—å–¥–∞—Ä–∞'}),
// 	new Mage({ position: 15, name: 'üßô‚Äç‚ôÄÔ∏è –û–ª—å–≥–∞', accusativeName: 'üßô‚Äç‚ôÄÔ∏è –û–ª—å–≥—É'})
// ]);




const weapon = new Weapon({
	name: '–°—Ç–∞—Ä—ã–π –º–µ—á',
	attack: 20,
	durability: 10,
	range: 1
});
// weapon.takeDamage(5);
// console.log(weapon.durability);
// weapon.takeDamage(50);
// console.log(weapon.durability);

const arm = new Arm;
// arm.takeDamage(20);
// console.log(arm.durability);

const sword = new Sword;
// sword.takeDamage(20);
// sword.takeDamage(100);
// console.log(sword.durability);

const bow = new Bow;
// bow.takeDamage(100);
// bow.takeDamage(1000);
// console.log(bow.durability);

const bow2 = new Bow;
// console.log(bow2.getDamage(), bow2.durability);
// bow2.takeDamage(100);
// console.log(bow2.getDamage(), bow2.durability);
// bow2.takeDamage(50);
// console.log(bow2.getDamage(), bow2.durability);
// bow2.takeDamage(150);
// console.log(bow2.getDamage(), bow2.durability);

const stormStaff = new StormStaff({name: '–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ'});
// console.log(stormStaff);






const player = new Player({
	name: '–ò–≤–∞–Ω –î–µ–º–∏–¥–æ–≤'
});
// console.log(player.getLuck());
// console.log(player.getLuck());
// console.log(player.getLuck());
// console.log(player.getLuck());

// console.log(player.getDamage(1));
// console.log(player.getDamage(1));
// console.log(player.getDamage(2));
// console.log(player.getDamage(4));

// player.takeDamage(10);
// console.log(player.life);
// player.takeDamage(80);
// console.log(player.life);
// player.takeDamage(90);
// console.log(player.life);





const warrior = new Warrior();
// console.log(warrior.life, warrior.magic);

// warrior.takeDamage(50);
// console.log(warrior.life, warrior.magic);

// warrior.takeDamage(20);
// console.log(warrior.life, warrior.magic);

// warrior.takeDamage(5);
// console.log(warrior.life, warrior.magic);

// warrior.takeDamage(7);
// console.log(warrior.life, warrior.magic);

// warrior.takeDamage(5);
// console.log(warrior.life, warrior.magic);

// warrior.takeDamage(22);
// console.log(warrior.life, warrior.magic);

// warrior.takeDamage(30);
// console.log(warrior.life, warrior.magic);


const mage = new Mage();
// console.log(mage.life, mage.magic);

// mage.takeDamage(50);
// console.log(mage.life, mage.magic);

// mage.takeDamage(20);
// console.log(mage.life, mage.magic);

// mage.takeDamage(5);
// console.log(mage.life, mage.magic);

// mage.takeDamage(7);
// console.log(mage.life, mage.magic);

// mage.takeDamage(5);
// console.log(mage.life, mage.magic);

// mage.takeDamage(22);
// console.log(mage.life, mage.magic);

// mage.takeDamage(30);
// console.log(mage.life, mage.magic);